#ifndef MARS_EXPLORER_
#define MARS_EXPLORER_

#include <map>
#include "MarsExplorer.h"
typedef struct {
    int x;
    int y;
} Coordinate;

typedef enum {
    EAST, SOURTH, WEST, NORTH
} Direction;

typedef enum {
    LEFT, RIGHT, FORWARD
} Moving;

std::map<char, int> DIRECTIONS = {{'E', EAST}, {'S', SOURTH}, {'W', WEST}, {'N', NORTH}};
std::map<char, int> MOVINGS = {{'L', LEFT}, {'R', RIGHT}, {'M', FORWARD}};

class Position
{
private:
    Coordinate coordinate;
    Direction direction; 
public:
    Position(int x, int y, Direction d)
    {
        coordinate.x = x;
        coordinate.y = y;
        direction = d;
    };

    Position &operation=(const Position &pos)
    { 
        this->coordinate.x = pos.coordinate.x;
        this->coordinate.y = pos.coordinate.y;
        this->direction = pos.direction;
        return *this;
    };

    bool move(const Moving moving)
    {
        if (this->direction == NORTH)  
        {
            switch moving:
            {
            case LEFT:
                    this->direction = WEST;
                break;
            case RIGHT:
                    this->direction = EAST;
                break;
            case FORWARD:
                    this->coordinate.y += 1;
                break;
            default:
                break;
            }
              
        }
        else if (this->direction == WEST)
        {
            switch moving:
            {
            case LEFT:
                    this->direction = SOURTH;
                break;
            case RIGHT:
                    this->direction = NORTH;
                break;
            case FORWARD:
                    this->coordinate.x -= 1;
                break;
            default:
                break;
            }
        
        }
        else if (this->direction == SOURTH)
        {
            switch moving:
            {
            case LEFT:
                    this->direction = EAST;
                break;
            case RIGHT:
                    this->direction = WEST;
                break;
            case FORWARD:
                    this->coordinate.y -= 1;
                break;
            default:
                break;
            }
        

        }
        else if (this->direction == EAST)
        {
            switch moving:
            {
            case LEFT:
                    this->direction = NORTH;
                break;
            case RIGHT:
                    this->direction = SOURTH;
                break;
            case FORWARD:
                    this->coordinate.x += 1;
                break;
            default:
                break;
            }
        

        }

        return true;
       
    };
};

class Grid
{
public:
    bool go(Position &pos, std::vector<Moving> movings)
    {
        for(auto move_direction : movings)
            pos.move(move_direction);
        return true;
    };

    void Position::set_boundary(int x, int y)
    {
        boundary.x = x;
        boundary.y = y;
    };
private:
    Coordinate boundary;
};

class MarsExplorer
{
public:
    MarsExplorer(int x, int y, char direction, const std::string &orders) 
    {
        set_start_pos(x, y, DIRECTIONS[direction]);
        translate_path(orders); 
    };

private:
    void walk_through(Grid &grid)
    {
        grid.go(destination, movings)
    };

    void set_start_pos(int x, int y, Direction direction)
    {
        start = Position(x, y, direction);
        destination = start;
    };

    void translate_path(const std::string &orders)
    {
        for (auto const &c : orders)
        {
            if (c == 'L')
               movings.push_back(LEFT);
            else if (c == 'R')
               movings.push_back(RIGHT);
            else if (c == 'M')
               movings.push_back(FORWARD); 
        }
    };

private:
    Position start;
    std::vector<Moving> movings;
    Position destination;
};

class MarsPlan
{
public:
    void init_actions() {};
    void exec()
    {
    };    

private:
    std::vector<MarsExplorer> explorers;
    Grid grid; 
    //ActionCommand commands;
};


#endif

#include "Position.h"
#include "MovePlanA.h"


#include "gtest/gtest.h"
#include "gmock/gmock.h"

using ::testing::_;

class MovePlanTesting : public ::testing::Test
{
public:
    virtual void SetUp()
    {
    };
    
    virtual void TearDown()
    {
    };

    virtual ~MovePlanTesting(){};

};

TEST_F(MovePlanTesting, test1)
{
    MovePlanA plan;
    Position block = {3, 2, EAST};
    StateGrid *grid = new StateGrid(5, 5);
    grid->set_occupied(block);
    Position pos = {1, 2, EAST};
    std::vector<Moving> movings;
    Moving m1 = FORWARD;
    Moving m2 = FORWARD;
    Moving m3 = FORWARD;
    movings.push_back(m1); 
    movings.push_back(m2); 
    movings.push_back(m3); 
   
    plan.init(pos, movings);
    plan.visit(*grid);
    std::vector<Position> path = plan.get_path();
    EXPECT_EQ(8, path.size());
    Position p1 = {1,2,EAST};
    Position p2 = {2,2,EAST};
    Position p3 = {2,2,SOURTH};
    Position p4 = {2,2,WEST};
    Position p5 = {1,2,WEST};
    Position p6 = {0,2,WEST};
    Position p7 = {5,2,WEST};
    Position p8 = {4,2,WEST};

    EXPECT_EQ(p1, path[0]);
    EXPECT_EQ(p2, path[1]);
    EXPECT_EQ(p3, path[2]);
    EXPECT_EQ(p4, path[3]);
    EXPECT_EQ(p5, path[4]);
    EXPECT_EQ(p6, path[5]);
    EXPECT_EQ(p7, path[6]);
    EXPECT_EQ(p8, path[7]);

}

TEST_F(MovePlanTesting, move_direction_as_east)
{
    MovePlanA plan;
    StateGrid *grid = new StateGrid(10, 10);

    Coordinate src= {1, 1};
    Coordinate des= {2, 1}; 
    Direction dir =  plan.neighbor_direction(src, des, *grid); 
    EXPECT_EQ(EAST, dir);
}

TEST_F(MovePlanTesting, move_direction_as_north)
{
    MovePlanA plan;
    StateGrid *grid = new StateGrid(10, 10);

    Coordinate src= {1, 1};
    Coordinate des= {1, 2}; 
    Direction dir =  plan.neighbor_direction(src, des, *grid); 
    EXPECT_EQ(NORTH, dir);

}

TEST_F(MovePlanTesting, move_direction_as_west)
{
    MovePlanA plan;
    StateGrid *grid = new StateGrid(10, 10);

    Coordinate src= {1, 1};
    Coordinate des= {0, 1}; 
    Direction dir =  plan.neighbor_direction(src, des, *grid); 
    EXPECT_EQ(WEST, dir);

}

TEST_F(MovePlanTesting, move_direction_as_sourth)
{
    MovePlanA plan;
    StateGrid *grid = new StateGrid(10, 10);

    Coordinate src= {1, 1};
    Coordinate des= {1, 0}; 
    Direction dir =  plan.neighbor_direction(src, des, *grid); 
    EXPECT_EQ(SOURTH, dir);
}

TEST_F(MovePlanTesting, move_direction_round_to_north)
{
    MovePlanA plan;
    StateGrid *grid = new StateGrid(10, 10);

    Coordinate src= {10, 10};
    Coordinate des= {10, 0}; 
    Direction dir =  plan.neighbor_direction(src, des, *grid); 
    EXPECT_EQ(NORTH, dir);
}

TEST_F(MovePlanTesting, move_direction_round_to_east)
{
    MovePlanA plan;
    StateGrid *grid = new StateGrid(10, 10);

    Coordinate src= {10, 10};
    Coordinate des= {0, 10}; 
    Direction dir =  plan.neighbor_direction(src, des, *grid); 
    EXPECT_EQ(EAST, dir);
}

TEST_F(MovePlanTesting, move_direction_round_to_west)
{
    MovePlanA plan;
    StateGrid *grid = new StateGrid(10, 10);

    Coordinate src= {0, 3};
    Coordinate des= {10, 3}; 
    Direction dir =  plan.neighbor_direction(src, des, *grid); 
    EXPECT_EQ(WEST, dir);
}


TEST_F(MovePlanTesting, direction_no_turn)
{
    MovePlanA plan;
    Direction src = EAST;
    Direction des = EAST; 
    std::vector<Moving> moves =  plan.turn(src, des); 
    EXPECT_EQ(0, moves.size());
}


TEST_F(MovePlanTesting, direction_turn_right)
{
    MovePlanA plan;
    Direction src = EAST;
    Direction des = SOURTH; 
    std::vector<Moving> moves =  plan.turn(src, des); 
    EXPECT_EQ(RIGHT, moves[0]);
    EXPECT_EQ(1, moves.size());
}


TEST_F(MovePlanTesting, direction_turn_right_right)
{
    MovePlanA plan;
    Direction src = EAST;
    Direction des = WEST; 
    std::vector<Moving> moves =  plan.turn(src, des); 
   
    EXPECT_EQ(2, moves.size());
    EXPECT_EQ(RIGHT, moves[0]);
    EXPECT_EQ(RIGHT, moves[1]);
}

TEST_F(MovePlanTesting, direction_turn_left)
{
    MovePlanA plan;
    Direction src = EAST;
    Direction des = NORTH; 
    std::vector<Moving> moves =  plan.turn(src, des); 
    EXPECT_EQ(LEFT, moves[0]);
    EXPECT_EQ(1, moves.size());
}

TEST_F(MovePlanTesting, direction_turn_left_S22E)
{
    MovePlanA plan;
    Direction des = EAST;
    Direction src = SOURTH; 
    std::vector<Moving> moves =  plan.turn(src, des); 
    EXPECT_EQ(LEFT, moves[0]);
    EXPECT_EQ(1, moves.size());
}


TEST_F(MovePlanTesting, direction_turn_left_left_W2E)
{
    MovePlanA plan;
    Direction des = EAST;
    Direction src = WEST; 
    std::vector<Moving> moves =  plan.turn(src, des); 
   
    EXPECT_EQ(2, moves.size());
    EXPECT_EQ(LEFT, moves[0]);
    EXPECT_EQ(LEFT, moves[1]);
}

TEST_F(MovePlanTesting, direction_turn_right_N2E)
{
    MovePlanA plan;
    Direction des = EAST;
    Direction src = NORTH; 
    std::vector<Moving> moves =  plan.turn(src, des); 
    EXPECT_EQ(RIGHT, moves[0]);
    EXPECT_EQ(1, moves.size());
}

TEST_F(MovePlanTesting, get_movings_1)
{
    StateGrid *grid = new StateGrid(10, 10);
 
    Coordinate src= {5, 5};
    Coordinate des= {5, 4}; 
    Direction s_d = WEST;
    Direction dd;
    MovePlanA plan;
    std::vector<Moving>  moves;
    moves = plan.get_movings(*grid, src, des, s_d, dd);// why should use & for definition, as in grid it has heap space
    EXPECT_EQ(2, moves.size());
    EXPECT_EQ(LEFT, moves[0]);
    EXPECT_EQ(FORWARD, moves[1]);
}

TEST_F(MovePlanTesting, get_movings_2)
{
    StateGrid *grid = new StateGrid(10, 10);
 
    Coordinate src= {5, 5};
    Coordinate des= {5, 6}; 
    Direction s_d = WEST;
    Direction dd;
    MovePlanA plan;
    std::vector<Moving>  moves;
    moves = plan.get_movings(*grid, src, des, s_d, dd);
    EXPECT_EQ(2, moves.size());
    EXPECT_EQ(RIGHT, moves[0]);
    EXPECT_EQ(FORWARD, moves[1]);
}

TEST_F(MovePlanTesting, get_movings_3)
{
    StateGrid *grid = new StateGrid(10, 10);
 
    Coordinate src= {10, 10};
    Coordinate des= {0, 10}; 
    Direction s_d = WEST;
    Direction dd;
    MovePlanA plan;
    std::vector<Moving>  moves;
    moves = plan.get_movings(*grid, src, des, s_d, dd);
    EXPECT_EQ(3, moves.size());
    EXPECT_EQ(LEFT, moves[0]);
    EXPECT_EQ(LEFT, moves[1]);
    EXPECT_EQ(FORWARD, moves[2]);
}

